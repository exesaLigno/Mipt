#include "token.hpp"

TOKEN("+", 	Token::ARITHM_OPERATOR, Token::PLUS, 	 	 "+", "pop rax\npop rbx\nadd rax, rbx\npush rax\n\n")
TOKEN("-", 	Token::ARITHM_OPERATOR, Token::MINUS, 	 	 "-", "pop rax\npop rbx\nsub rax, rbx\npush rax\n\n")
TOKEN("*", 	Token::ARITHM_OPERATOR, Token::MULTIPLY, 	 "*", "pop rax\npop rbx\nimul ebx\npush rax\n\n")
TOKEN("/", 	Token::ARITHM_OPERATOR, Token::DIVIDE, 	 	 "/", "pop rax\npop rbx\nidiv ebx\npush rax\nнассыл в штаны\n\n")
TOKEN("^", 	Token::ARITHM_OPERATOR, Token::POWER, 	 	 "^", "  N|I power\n\n")
TOKEN("%", 	Token::ARITHM_OPERATOR, Token::MODULO, 	 	 "%", "pop rax\npop rbx\nimul rbx\npush rdx\n\n")
TOKEN("//", Token::ARITHM_OPERATOR, Token::INT_DIVISION, "//", "pop rax\npop rbx\nimul rbx\npush rax\n\n")

TOKEN("==", Token::CMP_OPERATOR, Token::EQUAL, 		"==", "cmp\n\n")
TOKEN("!=", Token::CMP_OPERATOR, Token::NOT_EQUAL, 	"!=", "cmp\n\n")
TOKEN(">=", Token::CMP_OPERATOR, Token::MORE_EQ, 	"More or equal", "cmp\n\n")
TOKEN("<=", Token::CMP_OPERATOR, Token::LESS_EQ, 	"Less or equal", "cmp\n\n")
TOKEN(">", 	Token::CMP_OPERATOR, Token::MORE, 		"More", "cmp\n\n")
TOKEN("<", 	Token::CMP_OPERATOR, Token::LESS, 		"Less", "cmp\n\n")
TOKEN("&&", Token::CMP_OPERATOR, Token::AND, 		"&&", "pop rax\npop rbx\nand rax, rbx\npush rax\n\n")
TOKEN("||", Token::CMP_OPERATOR, Token::OR, 		"||", "pop rax\npop rbx\nor rax, rbx\npush rax\n\n")

TOKEN("if", 	Token::CTRL_OPERATOR, Token::IF, 					"if", "jmp\n\n")
TOKEN("else", 	Token::CTRL_OPERATOR, Token::ELSE, 					"else", "jmp\n\n")
TOKEN("for", 	Token::CTRL_OPERATOR, Token::FOR, 					"for", "jmp\n\n")
TOKEN("while", 	Token::CTRL_OPERATOR, Token::WHILE, 				"while", "jmp\n\n")
TOKEN("return", Token::CTRL_OPERATOR, Token::RETURN, 				"return", "pop rax\nret\n\n")
TOKEN("=", 		Token::CTRL_OPERATOR, Token::ASSIGNMENT, 			"=", "mov [rbx], rax\n\n")
TOKEN("+=", 	Token::CTRL_OPERATOR, Token::PLUS_ASSIGNMENT, 		"+=", "add [rbx], rax\n\n")
TOKEN("-=", 	Token::CTRL_OPERATOR, Token::MINUS_ASSIGNMENT, 		"-=", "sub [rbx], rax\n\n")
TOKEN("*=", 	Token::CTRL_OPERATOR, Token::MULTIPLY_ASSIGNMENT, 	"*=", "imul [rbx], rax\n\n")
TOKEN("/=", 	Token::CTRL_OPERATOR, Token::DIVIDE_ASSIGNMENT, 	"/=", "idiv [rbx], rax\n\n")
TOKEN("^=", 	Token::CTRL_OPERATOR, Token::POWER_ASSIGNMENT, 		"^=", "power [rbx], rax\n\n")

